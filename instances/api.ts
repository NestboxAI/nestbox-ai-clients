/* tslint:disable */
/* eslint-disable */
/**
 * Nestbox API Agents API
 * API for Nestbox Agents, control your agents
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AdditionalAgentParameterDto
 */
export interface AdditionalAgentParameterDto {
    /**
     * 
     * @type {string}
     * @memberof AdditionalAgentParameterDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalAgentParameterDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalAgentParameterDto
     */
    'default_value': string;
    /**
     * The ID of the machine model associated with this additional parameter
     * @type {string}
     * @memberof AdditionalAgentParameterDto
     */
    'machineModelId': string;
}
/**
 * 
 * @export
 * @interface AgentParameterDto
 */
export interface AgentParameterDto {
    /**
     * 
     * @type {string}
     * @memberof AgentParameterDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AgentParameterDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AgentParameterDto
     */
    'default_value': string;
    /**
     * The ID of the machine model associated with this parameter
     * @type {string}
     * @memberof AgentParameterDto
     */
    'machineModelId': string;
}
/**
 * 
 * @export
 * @interface CreateMachineAgentDto
 */
export interface CreateMachineAgentDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMachineAgentDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMachineAgentDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMachineAgentDto
     */
    'entryFunctionName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMachineAgentDto
     */
    'type': string;
    /**
     * 
     * @type {Array<AgentParameterDto>}
     * @memberof CreateMachineAgentDto
     */
    'parameters'?: Array<AgentParameterDto>;
    /**
     * 
     * @type {Array<AdditionalAgentParameterDto>}
     * @memberof CreateMachineAgentDto
     */
    'additionalParameters'?: Array<AdditionalAgentParameterDto>;
}

/**
 * AgentsApi - axios parameter creator
 * @export
 */
export const AgentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMachineAgentDto} createMachineAgentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerCreateNewAgent: async (createMachineAgentDto: CreateMachineAgentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMachineAgentDto' is not null or undefined
            assertParamExists('agentManagementControllerCreateNewAgent', 'createMachineAgentDto', createMachineAgentDto)
            const localVarPath = `/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMachineAgentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerDeleteAgent: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentManagementControllerDeleteAgent', 'id', id)
            const localVarPath = `/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AgentManagementControllerGetAllAgentsTypeEnum} [type] Type of agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerGetAllAgents: async (type?: AgentManagementControllerGetAllAgentsTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerUpdateMachineAgent: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentManagementControllerUpdateMachineAgent', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('agentManagementControllerUpdateMachineAgent', 'body', body)
            const localVarPath = `/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentsApi - functional programming interface
 * @export
 */
export const AgentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMachineAgentDto} createMachineAgentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentManagementControllerCreateNewAgent(createMachineAgentDto: CreateMachineAgentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentManagementControllerCreateNewAgent(createMachineAgentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.agentManagementControllerCreateNewAgent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentManagementControllerDeleteAgent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentManagementControllerDeleteAgent(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.agentManagementControllerDeleteAgent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AgentManagementControllerGetAllAgentsTypeEnum} [type] Type of agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentManagementControllerGetAllAgents(type?: AgentManagementControllerGetAllAgentsTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentManagementControllerGetAllAgents(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.agentManagementControllerGetAllAgents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentManagementControllerUpdateMachineAgent(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentManagementControllerUpdateMachineAgent(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.agentManagementControllerUpdateMachineAgent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AgentsApi - factory interface
 * @export
 */
export const AgentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMachineAgentDto} createMachineAgentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerCreateNewAgent(createMachineAgentDto: CreateMachineAgentDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentManagementControllerCreateNewAgent(createMachineAgentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerDeleteAgent(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentManagementControllerDeleteAgent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AgentManagementControllerGetAllAgentsTypeEnum} [type] Type of agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerGetAllAgents(type?: AgentManagementControllerGetAllAgentsTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentManagementControllerGetAllAgents(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementControllerUpdateMachineAgent(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentManagementControllerUpdateMachineAgent(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export class AgentsApi extends BaseAPI {
    /**
     * 
     * @param {CreateMachineAgentDto} createMachineAgentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentManagementControllerCreateNewAgent(createMachineAgentDto: CreateMachineAgentDto, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentManagementControllerCreateNewAgent(createMachineAgentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentManagementControllerDeleteAgent(id: string, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentManagementControllerDeleteAgent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AgentManagementControllerGetAllAgentsTypeEnum} [type] Type of agent.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentManagementControllerGetAllAgents(type?: AgentManagementControllerGetAllAgentsTypeEnum, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentManagementControllerGetAllAgents(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentManagementControllerUpdateMachineAgent(id: string, body: object, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentManagementControllerUpdateMachineAgent(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AgentManagementControllerGetAllAgentsTypeEnum = {
    Regular: 'REGULAR',
    Chat: 'CHAT'
} as const;
export type AgentManagementControllerGetAllAgentsTypeEnum = typeof AgentManagementControllerGetAllAgentsTypeEnum[keyof typeof AgentManagementControllerGetAllAgentsTypeEnum];


/**
 * ManifestApi - axios parameter creator
 * @export
 */
export const ManifestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementManifestControllerGetManifest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manifest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManifestApi - functional programming interface
 * @export
 */
export const ManifestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManifestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentManagementManifestControllerGetManifest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentManagementManifestControllerGetManifest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManifestApi.agentManagementManifestControllerGetManifest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ManifestApi - factory interface
 * @export
 */
export const ManifestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManifestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentManagementManifestControllerGetManifest(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentManagementManifestControllerGetManifest(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManifestApi - object-oriented interface
 * @export
 * @class ManifestApi
 * @extends {BaseAPI}
 */
export class ManifestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManifestApi
     */
    public agentManagementManifestControllerGetManifest(options?: RawAxiosRequestConfig) {
        return ManifestApiFp(this.configuration).agentManagementManifestControllerGetManifest(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ServerLiveStatusApi - axios parameter creator
 * @export
 */
export const ServerLiveStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServerLiveStatusApi - functional programming interface
 * @export
 */
export const ServerLiveStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServerLiveStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServerLiveStatusApi.appControllerGetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ServerLiveStatusApi - factory interface
 * @export
 */
export const ServerLiveStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServerLiveStatusApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetStatus(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServerLiveStatusApi - object-oriented interface
 * @export
 * @class ServerLiveStatusApi
 * @extends {BaseAPI}
 */
export class ServerLiveStatusApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerLiveStatusApi
     */
    public appControllerGetStatus(options?: RawAxiosRequestConfig) {
        return ServerLiveStatusApiFp(this.configuration).appControllerGetStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



